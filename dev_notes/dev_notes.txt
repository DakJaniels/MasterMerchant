function convertToFloat(value)
  return 1.0 + (value - 10) / 20 * 2
end

local testTable = {}

for i = 10, 30 do
  table.insert(testTable, i)
end

-- Print the test table
for _, value in ipairs(testTable) do
  print(convertToFloat(value))
end

function MasterMerchant.concat(...)
  local parts = {}
  for i = 1, select('#', ...) do
    local option = select(i, ...)
    if option ~= nil and option ~= MM_STRING_EMPTY then
      table.insert(parts, tostring(option))
    end
  end
  return table.concat(parts, MM_STRING_SEPARATOR_SPACE)
end

function MasterMerchant.concatTooltip(...)
  local parts = {}
  for i = 1, select('#', ...) do
    local option = select(i, ...)
    if option ~= nil and option ~= MM_STRING_EMPTY then
      table.insert(parts, tostring(option))
    end
  end
  return table.concat(parts)
end

--[[Personal note:

-- /script d(GetItemLinkRecipeResultItemLink("|H1:item:190094:4:1:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0|h|h", LINK_STYLE_BRACKETS))

Provide the recipe to get the item it produces
]]--

^(\[\d{1,5}\] = ")(.+&)(.+&)(.+&)(.+&)(.+&)(.+&)(.+&)(.+&)(.+&)(.+)(",)
$10$6$1$2$3$4$5$7$8$9$11

$6$10$2$3$4$5$7$8$9$11


/script d(FormatTimeSeconds(1657652400, TIME_FORMAT_STYLE_CLOCK_TIME, TIME_FORMAT_PRECISION_TWENTY_FOUR_HOUR))

/script d(os.date("*t", (GetTimeStamp() - 45)))

Line 10686: * GetItemLinkInfo(*string* _itemLink_)
Line 11889: * GetItemTraitInformationFromItemLink(*string* _itemLink_)
Line 13875: * SetCustomerServiceTicketItemTargetByLink(*string* _itemLink_)
Line 16408: * GetLinkType(*string* _itemLink_)
Line 16541: * GetItemLinkFilterTypeInfo(*string* _itemLink_)
Line 16641: * GetItemLinkTraitCategory(*string* _itemLink_)
Line 16644: * GetItemLinkTraitType(*string* _itemLink_)
Line 16787: * GetItemLinkName(*string* _itemLink_)
Line 16790: * GetItemLinkItemId(*string* _itemLink_)
Line 16793: * GetItemLinkItemSetCollectionSlot(*string* _itemLink_)
Line 16796: * GetItemLinkIcon(*string* _itemLink_)
Line 16799: * GetItemLinkItemType(*string* _itemLink_)
Line 16802: * GetItemLinkItemUseType(*string* _itemLink_)
Line 16805: * GetItemLinkArmorType(*string* _itemLink_)
Line 16808: * GetItemLinkWeaponType(*string* _itemLink_)
Line 16811: * GetItemLinkWeaponPower(*string* _itemLink_)
Line 16814: * GetItemLinkArmorRating(*string* _itemLink_, *bool* _considerCondition_)
Line 16817: * GetItemLinkRequiredLevel(*string* _itemLink_)
Line 16820: * GetItemLinkRequiredChampionPoints(*string* _itemLink_)
Line 16823: * GetItemLinkValue(*string* _itemLink_, *bool* _considerCondition_)
Line 16826: * GetItemLinkCondition(*string* _itemLink_)
Line 16832: * GetItemLinkMaxEnchantCharges(*string* _itemLink_)
Line 16835: * GetItemLinkNumEnchantCharges(*string* _itemLink_)
Line 16841: * GetItemLinkEnchantInfo(*string* _itemLink_)
Line 16844: * GetItemLinkDefaultEnchantId(*string* _itemLink_)
Line 16847: * GetItemLinkAppliedEnchantId(*string* _itemLink_)
Line 16850: * GetItemLinkFinalEnchantId(*string* _itemLink_)
Line 16859: * GetItemLinkOnUseAbilityInfo(*string* _itemLink_)
Line 16862: * GetItemLinkTraitOnUseAbilityInfo(*string* _itemLink_, *luaindex* _index_)
Line 16865: * GetItemLinkTraitInfo(*string* _itemLink_)
Line 16868: * GetItemLinkSetInfo(*string* _itemLink_, *bool* _equipped_)
Line 16874: * GetItemLinkSetBonusInfo(*string* _itemLink_, *bool* _equipped_, *luaindex* _index_)
Line 16877: * GetItemLinkNumContainerSetIds(*string* _itemLink_)
Line 16880: * GetItemLinkContainerSetInfo(*string* _itemLink_, *luaindex* _containerSetIndex_)
Line 16883: * GetItemLinkContainerSetBonusInfo(*string* _itemLink_, *luaindex* _containerSetIndex_, *luaindex* _bonusIndex_)
Line 16886: * GetItemLinkFlavorText(*string* _itemLink_)
Line 16895: * GetItemLinkSiegeMaxHP(*string* _itemLink_)
Line 16898: * GetItemLinkFunctionalQuality(*string* _itemLink_)
Line 16901: * GetItemLinkDisplayQuality(*string* _itemLink_)
Line 16904: * GetItemLinkSiegeType(*string* _itemLink_)
Line 16913: * GetItemLinkEquipType(*string* _itemLink_)
Line 16919: * GetItemLinkCraftingSkillType(*string* _itemLink_)
Line 16925: * GetItemLinkEnchantingRuneName(*string* _itemLink_)
Line 16928: * GetItemLinkEnchantingRuneClassification(*string* _itemLink_)
Line 16931: * GetItemLinkRequiredCraftingSkillRank(*string* _itemLink_)
Line 16937: * GetItemLinkBindType(*string* _itemLink_)
Line 16940: * GetItemLinkGlyphMinLevels(*string* _itemLink_)
Line 16949: * GetItemLinkFurnishingLimitType(*string* _itemLink_)
Line 16955: * GetItemLinkBookTitle(*string* _itemLink_)
Line 16973: * GetItemLinkRecipeResultItemLink(*string* _itemLink_, *[LinkStyle|#LinkStyle]* _linkStyle_)
Line 16976: * GetItemLinkRecipeNumIngredients(*string* _itemLink_)
Line 16979: * GetItemLinkRecipeIngredientInfo(*string* _itemLink_, *luaindex* _index_)
Line 16982: * GetItemLinkRecipeIngredientItemLink(*string* _itemLink_, *luaindex* _index_, *[LinkStyle|#LinkStyle]* _linkStyle_)
Line 16985: * GetItemLinkRecipeNumTradeskillRequirements(*string* _itemLink_)
Line 16988: * GetItemLinkRecipeTradeskillRequirement(*string* _itemLink_, *luaindex* _tradeskillIndex_)
Line 16991: * GetItemLinkRecipeQualityRequirement(*string* _itemLink_)
Line 16994: * GetItemLinkRecipeCraftingSkillType(*string* _itemLink_)
Line 16997: * GetItemLinkReagentTraitInfo(*string* _itemLink_, *luaindex* _index_)
Line 17000: * GetItemLinkItemStyle(*string* _itemLink_)
Line 17003: * GetItemLinkShowItemStyleInTooltip(*string* _itemLink_)
Line 17006: * GetItemLinkRefinedMaterialItemLink(*string* _itemLink_, *[LinkStyle|#LinkStyle]* _linkStyle_)
Line 17009: * GetItemLinkMaterialLevelDescription(*string* _itemLink_)
Line 17030: * GetItemLinkStacks(*string* _itemLink_)
Line 17036: * GetItemLinkDyeIds(*string* _itemLink_)
Line 17039: * GetItemLinkDyeStampId(*string* _itemLink_)
Line 17042: * GetItemLinkFurnitureDataId(*string* _itemLink_)
Line 17045: * GetItemLinkGrantedRecipeIndices(*string* _itemLink_)
Line 17051: * GetItemLinkOutfitStyleId(*string* _itemLink_)
Line 17054: * GetItemLinkTooltipRequiresCollectibleId(*string* _itemLink_)
Line 17057: * GetItemLinkActorCategory(*string* _itemLink_)
Line 17066: * GetItemLinkCombinationId(*string* _itemLink_)
Line 17069: * GetItemLinkCombinationDescription(*string* _itemLink_)
Line 17072: * GetItemLinkTradingHouseItemSearchName(*string* _itemLink_)
Line 17075: * GetItemLinkContainerCollectibleId(*string* _itemLink_)
Line 17112: * GetItemLinkNumItemTags(*string* _itemLink_)
Line 17115: * GetItemLinkItemTagInfo(*string* _itemLink_, *luaindex* _itemTagIndex_)
Line 17180: * GetItemLinkSellInformation(*string* _itemLink_)
Line 17183: * GetItemLinkComparisonEquipSlots(*string* _itemLink_)
Line 17189: * GetItemLinkEquippedComparisonEquipSlots(*string* _itemLink_)
Line 18029: * GetNumItemLinkPreviewVariations(*string* _itemLink_)
Line 18032: * GetItemLinkPreviewVariationDisplayName(*string* _itemLink_, *luaindex* _variation_)

internal:dm("Info", "known")
internal:dm("Info", known)
internal:dm("Info", "unknownFilterActive")
internal:dm("Info", unknownFilterActive)
internal:dm("Info", "knownFilterActive")
internal:dm("Info", knownFilterActive)
internal:dm("Info", "itemType")
internal:dm("Info", itemType)
internal:dm("Info", "specializedItemType")
internal:dm("Info", specializedItemType)

MM price (2 sales/2 items, 34 days): 14,071 : Bonanza price (2 listings/2 items): 41,999  for |H1:item:119073:5:1:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0|h|h 

function LootLog.GetItemLinkCollectionStatus( itemLink )
    -- Returns:
    -- 0: Not a collectible
    -- 1: Collectible and not collected
    -- 2: Collectible and collected

    if (IsItemLinkSetCollectionPiece(itemLink)) then
        if (IsItemSetCollectionPieceUnlocked(GetItemLinkItemId(itemLink))) then
            return 2
        else
            return 1
        end
    else
        local id = GetItemLinkContainerCollectibleId(itemLink)
        if (id > 0) then
            if (IsCollectibleOwnedByDefId(id)) then
                return 2
            elseif (GetCollectibleCategoryType(id) == COLLECTIBLE_CATEGORY_TYPE_COMBINATION_FRAGMENT and not CanCombinationFragmentBeUnlocked(id)) then
                return 2
            else
                return 1
            end
        end
        return 0
    end
end

-----------------

 Ah. sorry. I did say you can use ITEM_DATABASE_UPDATE, but seeing how it works that's actually not the case. the ItemDatabase is an internal component which shouldn't be used by other addons as it can change behavior at any time and will break whatever you build on top of it. You should just use the SEARCH_RESULTS_RECEIVED callback and GetTradingHouseSearchResultItemInfo. that function will return the itemUniqueId for the items on the currently loaded page.
 
 